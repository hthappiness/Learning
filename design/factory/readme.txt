1、简单工厂模式
一个工厂管理所有对象的创建，其创建的逻辑在该类的实现。
（一般，简单工厂方法模式中，工厂类中有一个方法，通过switch中不同的值或者if else语句来创建不同的对象并返回，
通常这个方法是一个静态方法，(顺便一提:简单工厂模式也被称作“静态工厂模式”)在客户端直接调用工厂类的该方法就可以。）
2、工厂模式
每一类产品都定义一个工厂类，。
3、抽象工厂模式
将工厂再抽象，封装的接口变了。
第三种模式，通过类扩展，以及工厂接口函数扩展以增加其功能，尽量不影响原有代码；原则上，均可以通过扩展类实现，但是类之间有冗余，比如大的草莓冰淇淋 和小的草莓冰淇淋,此工厂可以生产草莓冰淇淋、也可以生产大小冰淇淋，
说到底还是职责划分的问题，是通过变量扩展？or通过接口扩展呢？属于语言上的斟酌和考量。

职责划分的基础在于，不变和变化的地方。分析出了它们，然后以基本原则为基础，从而有了各种模式。

从user的角度，看api的变化；user角度的易用性。

对于创建型过程，扩展性体现在：
1、product类型的扩展
2、

实例化的逻辑